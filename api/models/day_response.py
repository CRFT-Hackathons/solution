# coding: utf-8

"""
    OpenAPI

    OpenAPI

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from api.models.demand import Demand
from api.models.kpis import Kpis
from api.models.penalty import Penalty
from typing import Optional, Set
from typing_extensions import Self

class DayResponse(BaseModel):
    """
    The success response to a round
    """ # noqa: E501
    round: Optional[StrictInt] = Field(default=None, description="The current day / round")
    demand: Optional[List[Demand]] = Field(default=None, description="The list of posted customer demands (orders) on the current day. It can be empty or missing.")
    penalties: Optional[List[Penalty]] = Field(default=None, description="The list of generated penalties as a result of running the day / round. Penalties can be also generated for the wrong state of the network.")
    delta_kpis: Optional[Kpis] = Field(default=None, alias="deltaKpis")
    total_kpis: Optional[Kpis] = Field(default=None, alias="totalKpis")
    __properties: ClassVar[List[str]] = ["round", "demand", "penalties", "deltaKpis", "totalKpis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DayResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in demand (list)
        _items = []
        if self.demand:
            for _item_demand in self.demand:
                if _item_demand:
                    _items.append(_item_demand.to_dict())
            _dict['demand'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in penalties (list)
        _items = []
        if self.penalties:
            for _item_penalties in self.penalties:
                if _item_penalties:
                    _items.append(_item_penalties.to_dict())
            _dict['penalties'] = _items
        # override the default output from pydantic by calling `to_dict()` of delta_kpis
        if self.delta_kpis:
            _dict['deltaKpis'] = self.delta_kpis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_kpis
        if self.total_kpis:
            _dict['totalKpis'] = self.total_kpis.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DayResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "round": obj.get("round"),
            "demand": [Demand.from_dict(_item) for _item in obj["demand"]] if obj.get("demand") is not None else None,
            "penalties": [Penalty.from_dict(_item) for _item in obj["penalties"]] if obj.get("penalties") is not None else None,
            "deltaKpis": Kpis.from_dict(obj["deltaKpis"]) if obj.get("deltaKpis") is not None else None,
            "totalKpis": Kpis.from_dict(obj["totalKpis"]) if obj.get("totalKpis") is not None else None
        })
        return _obj


